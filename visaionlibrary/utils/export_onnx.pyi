# This file was generated by Nuitka

# Stubs included by default
from __future__ import annotations
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from enum import Enum
from mmdet.apis import init_detector
from mmengine.config import Config
from mmengine.logging import MMLogger, print_log
from mmengine.model.utils import revert_sync_batchnorm
from mmengine.registry import init_default_scope
from mmpretrain.apis import init_model
from mmseg.apis import init_model
from torch import Tensor
from typing import Any, Callable, Dict, List, Optional, Sequence, Union
from typing_extensions import Self
from visaionlibrary import __version__
import copy
import json
import numpy
import onnx
import onnxruntime
import onnxsim
import os
import os.path
import platform
import tempfile
import time
import torch
import torch.nn
import torch.nn.functional

class YoloDetOnnxWrapper:
    def __init__(self: Self, config: Any, checkpoint: Any, device: Any) -> None: ...
    def _predict_by_feat(self: Self, out: Any) -> Any: ...
    def forward(self: Self, inputs: Any) -> Any: ...

class SegOnnxWrapper:
    def __init__(self: Self, config: Any, checkpoint: Any, device: Any) -> None: ...
    def forward(self: Self, inputs: Any) -> Any: ...

class Yolov5InsOnnxWrapper:
    def __init__(self: Self, config: Any, checkpoint: Any, device: Any) -> None: ...
    def _predict_by_feat(self: Self, cls_scores: Sequence[Tensor], bbox_preds: Sequence[Tensor], objectnesses: Sequence[Tensor], coeff_preds: Sequence[Tensor], proto_preds: Tensor) -> Any: ...
    def forward(self: Self, inputs: Any) -> Any: ...

class ResnetOnnxWrapper:
    def __init__(self: Self, config: Any, checkpoint: Any, device: Any) -> None: ...
    def forward(self: Self, inputs: Any) -> Any: ...

class RTMDetInsOnnxWrapper:
    def __init__(self: Self, config: Any, checkpoint: Any, device: Any) -> None: ...
    def _parse_dynamic_params(self: Self, flatten_kernels: Any) -> Any: ...
    def _mask_predict_by_feat_single(self: Self, mask_feat: Any, kernels: Any, priors: Any) -> Any: ...
    def _predict_by_feat(self: Self, cls_scores: List[Tensor], bbox_preds: List[Tensor], kernel_preds: List[Tensor], mask_feat: Tensor, score_factors: Optional[List[Tensor]]) -> Any: ...
    def forward(self: Self, inputs: Any) -> Any: ...

class AESCipher:
    def __init__(self: Self, k: bytes, mode: int) -> None: ...
    def encrypt(self: Self, raw: bytes) -> hex: ...
    def decrypt(self: Self, encrypted_data: hex) -> bytes: ...

def build_logger(work_dir: str, log_level: Union[int, str]) -> MMLogger:
    ...

def _extract_baseParam_visaion_keys(data: Any, result: Any) -> Any:
    ...

def _extract_scale_factor(cfg: list) -> Any:
    ...

def _extract_crop_size_and_stride(cfg: dict) -> Any:
    ...

def _extract_crop_size_from_YOLOv5KeepRatioResize(cfg: dict) -> Any:
    ...

def _extract_crop_size_from_Resize(cfg: dict) -> Any:
    ...

def export_entry(job_info: dict) -> Any:
    ...


__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import typing
import os
import ntpath
import numpy
import time
import copy
import json
import platform
import tempfile
import enum
import Crypto
import Crypto.Cipher
import Crypto.Cipher.AES
import Crypto.Util
import Crypto.Util.Padding
import torch
import torch.Tensor
import torch.nn
import torch.nn.functional
import onnx
import onnxsim
import onnxruntime
import mmseg
import mmseg.apis
import mmseg.apis.init_model
import mmdet
import mmdet.apis
import mmdet.apis.init_detector
import mmpretrain
import mmpretrain.apis
import mmpretrain.apis.init_model
import mmengine
import mmengine.model
import mmengine.model.utils
import mmengine.logging
import mmengine.logging.MMLogger
import mmengine.logging.print_log
import mmengine.config
import mmengine.config.Config
import mmengine.registry
import mmengine.registry.init_default_scope
import visaionlibrary
import visaionlibrary.__version__